/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FPEValue
    /// </summary>
    [DataContract]
    public partial class FPEValue :  IEquatable<FPEValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FPEValue" /> class.
        /// </summary>
        /// <param name="decrypt">true to decrypt value.</param>
        /// <param name="key">base64 encoded 128, 192, 256 size key.</param>
        /// <param name="tweak">base64 encoded tweak. Size must be below 8.</param>
        public FPEValue(bool? decrypt = default(bool?), string key = default(string), string tweak = default(string))
        {
            this.Decrypt = decrypt;
            this.Key = key;
            this.Tweak = tweak;
        }
        
        /// <summary>
        /// true to decrypt value
        /// </summary>
        /// <value>true to decrypt value</value>
        [DataMember(Name="decrypt", EmitDefaultValue=false)]
        public bool? Decrypt { get; set; }

        /// <summary>
        /// base64 encoded 128, 192, 256 size key
        /// </summary>
        /// <value>base64 encoded 128, 192, 256 size key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// base64 encoded tweak. Size must be below 8
        /// </summary>
        /// <value>base64 encoded tweak. Size must be below 8</value>
        [DataMember(Name="tweak", EmitDefaultValue=false)]
        public string Tweak { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FPEValue {\n");
            sb.Append("  Decrypt: ").Append(Decrypt).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Tweak: ").Append(Tweak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FPEValue);
        }

        /// <summary>
        /// Returns true if FPEValue instances are equal
        /// </summary>
        /// <param name="input">Instance of FPEValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FPEValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Decrypt == input.Decrypt ||
                    (this.Decrypt != null &&
                    this.Decrypt.Equals(input.Decrypt))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Tweak == input.Tweak ||
                    (this.Tweak != null &&
                    this.Tweak.Equals(input.Tweak))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Decrypt != null)
                    hashCode = hashCode * 59 + this.Decrypt.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Tweak != null)
                    hashCode = hashCode * 59 + this.Tweak.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
