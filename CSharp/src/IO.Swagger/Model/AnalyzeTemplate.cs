/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnalyzeTemplate
    /// </summary>
    [DataContract]
    public partial class AnalyzeTemplate :  IEquatable<AnalyzeTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeTemplate" /> class.
        /// </summary>
        /// <param name="allFields">Optional flag to request all existing fields. if true, \&quot;fields\&quot; must be empty..</param>
        /// <param name="createTime">Template Creation date.</param>
        /// <param name="description">Template description.</param>
        /// <param name="fields">Array of the fields to analyze.</param>
        /// <param name="language">Language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1.</param>
        /// <param name="modifiedTime">Template modification date.</param>
        /// <param name="resultsScoreThreshold">Threshold to filter results based on their score.</param>
        public AnalyzeTemplate(bool? allFields = default(bool?), string createTime = default(string), string description = default(string), List<FieldTypes> fields = default(List<FieldTypes>), string language = default(string), string modifiedTime = default(string), float? resultsScoreThreshold = default(float?))
        {
            this.AllFields = allFields;
            this.CreateTime = createTime;
            this.Description = description;
            this.Fields = fields;
            this.Language = language;
            this.ModifiedTime = modifiedTime;
            this.ResultsScoreThreshold = resultsScoreThreshold;
        }
        
        /// <summary>
        /// Optional flag to request all existing fields. if true, \&quot;fields\&quot; must be empty.
        /// </summary>
        /// <value>Optional flag to request all existing fields. if true, \&quot;fields\&quot; must be empty.</value>
        [DataMember(Name="allFields", EmitDefaultValue=false)]
        public bool? AllFields { get; set; }

        /// <summary>
        /// Template Creation date
        /// </summary>
        /// <value>Template Creation date</value>
        [DataMember(Name="createTime", EmitDefaultValue=false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// Template description
        /// </summary>
        /// <value>Template description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Array of the fields to analyze
        /// </summary>
        /// <value>Array of the fields to analyze</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FieldTypes> Fields { get; set; }

        /// <summary>
        /// Language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1
        /// </summary>
        /// <value>Language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Template modification date
        /// </summary>
        /// <value>Template modification date</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Threshold to filter results based on their score
        /// </summary>
        /// <value>Threshold to filter results based on their score</value>
        [DataMember(Name="resultsScoreThreshold", EmitDefaultValue=false)]
        public float? ResultsScoreThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyzeTemplate {\n");
            sb.Append("  AllFields: ").Append(AllFields).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  ResultsScoreThreshold: ").Append(ResultsScoreThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyzeTemplate);
        }

        /// <summary>
        /// Returns true if AnalyzeTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyzeTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyzeTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllFields == input.AllFields ||
                    (this.AllFields != null &&
                    this.AllFields.Equals(input.AllFields))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.ResultsScoreThreshold == input.ResultsScoreThreshold ||
                    (this.ResultsScoreThreshold != null &&
                    this.ResultsScoreThreshold.Equals(input.ResultsScoreThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllFields != null)
                    hashCode = hashCode * 59 + this.AllFields.GetHashCode();
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.ResultsScoreThreshold != null)
                    hashCode = hashCode * 59 + this.ResultsScoreThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
