/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Azure Blob Storage configuration
    /// </summary>
    [DataContract]
    public partial class BlobStorageConfig :  IEquatable<BlobStorageConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlobStorageConfig" /> class.
        /// </summary>
        /// <param name="accountKey">Azure account key.</param>
        /// <param name="accountName">Azure account name.</param>
        /// <param name="containerName">The blob storage container Name.</param>
        public BlobStorageConfig(string accountKey = default(string), string accountName = default(string), string containerName = default(string))
        {
            this.AccountKey = accountKey;
            this.AccountName = accountName;
            this.ContainerName = containerName;
        }
        
        /// <summary>
        /// Azure account key
        /// </summary>
        /// <value>Azure account key</value>
        [DataMember(Name="accountKey", EmitDefaultValue=false)]
        public string AccountKey { get; set; }

        /// <summary>
        /// Azure account name
        /// </summary>
        /// <value>Azure account name</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The blob storage container Name
        /// </summary>
        /// <value>The blob storage container Name</value>
        [DataMember(Name="containerName", EmitDefaultValue=false)]
        public string ContainerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlobStorageConfig {\n");
            sb.Append("  AccountKey: ").Append(AccountKey).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlobStorageConfig);
        }

        /// <summary>
        /// Returns true if BlobStorageConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of BlobStorageConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlobStorageConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountKey == input.AccountKey ||
                    (this.AccountKey != null &&
                    this.AccountKey.Equals(input.AccountKey))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.ContainerName == input.ContainerName ||
                    (this.ContainerName != null &&
                    this.ContainerName.Equals(input.ContainerName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountKey != null)
                    hashCode = hashCode * 59 + this.AccountKey.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.ContainerName != null)
                    hashCode = hashCode * 59 + this.ContainerName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
