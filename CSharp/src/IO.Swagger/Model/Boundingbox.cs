/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Define an extracted bounding box text/image from images
    /// </summary>
    [DataContract]
    public partial class Boundingbox :  IEquatable<Boundingbox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Boundingbox" /> class.
        /// </summary>
        /// <param name="endPosition">End position of char in text.</param>
        /// <param name="height">Height of BBox.</param>
        /// <param name="startPosition">Start position of char in text.</param>
        /// <param name="text">Text in BBox.</param>
        /// <param name="width">Width of BBox.</param>
        /// <param name="xLocation">Pixel X location of BBox.</param>
        /// <param name="yLocation">Pixel Y location of BBox.</param>
        public Boundingbox(int? endPosition = default(int?), float? height = default(float?), int? startPosition = default(int?), string text = default(string), float? width = default(float?), float? xLocation = default(float?), float? yLocation = default(float?))
        {
            this.EndPosition = endPosition;
            this.Height = height;
            this.StartPosition = startPosition;
            this.Text = text;
            this.Width = width;
            this.XLocation = xLocation;
            this.YLocation = yLocation;
        }
        
        /// <summary>
        /// End position of char in text
        /// </summary>
        /// <value>End position of char in text</value>
        [DataMember(Name="endPosition", EmitDefaultValue=false)]
        public int? EndPosition { get; set; }

        /// <summary>
        /// Height of BBox
        /// </summary>
        /// <value>Height of BBox</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public float? Height { get; set; }

        /// <summary>
        /// Start position of char in text
        /// </summary>
        /// <value>Start position of char in text</value>
        [DataMember(Name="startPosition", EmitDefaultValue=false)]
        public int? StartPosition { get; set; }

        /// <summary>
        /// Text in BBox
        /// </summary>
        /// <value>Text in BBox</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Width of BBox
        /// </summary>
        /// <value>Width of BBox</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public float? Width { get; set; }

        /// <summary>
        /// Pixel X location of BBox
        /// </summary>
        /// <value>Pixel X location of BBox</value>
        [DataMember(Name="xLocation", EmitDefaultValue=false)]
        public float? XLocation { get; set; }

        /// <summary>
        /// Pixel Y location of BBox
        /// </summary>
        /// <value>Pixel Y location of BBox</value>
        [DataMember(Name="yLocation", EmitDefaultValue=false)]
        public float? YLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boundingbox {\n");
            sb.Append("  EndPosition: ").Append(EndPosition).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  StartPosition: ").Append(StartPosition).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  XLocation: ").Append(XLocation).Append("\n");
            sb.Append("  YLocation: ").Append(YLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Boundingbox);
        }

        /// <summary>
        /// Returns true if Boundingbox instances are equal
        /// </summary>
        /// <param name="input">Instance of Boundingbox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boundingbox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndPosition == input.EndPosition ||
                    (this.EndPosition != null &&
                    this.EndPosition.Equals(input.EndPosition))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.StartPosition == input.StartPosition ||
                    (this.StartPosition != null &&
                    this.StartPosition.Equals(input.StartPosition))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.XLocation == input.XLocation ||
                    (this.XLocation != null &&
                    this.XLocation.Equals(input.XLocation))
                ) && 
                (
                    this.YLocation == input.YLocation ||
                    (this.YLocation != null &&
                    this.YLocation.Equals(input.YLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndPosition != null)
                    hashCode = hashCode * 59 + this.EndPosition.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.StartPosition != null)
                    hashCode = hashCode * 59 + this.StartPosition.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.XLocation != null)
                    hashCode = hashCode * 59 + this.XLocation.GetHashCode();
                if (this.YLocation != null)
                    hashCode = hashCode * 59 + this.YLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
