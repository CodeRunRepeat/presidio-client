/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// For example: my credit card number is 4961-2765-5327-5913 maskingCharacter: &#39;*&#39;, chars to mask: 9, fromEnd: true Will output:  my credit card number is 4961-2765-*********
    /// </summary>
    [DataContract]
    public partial class MaskValue :  IEquatable<MaskValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaskValue" /> class.
        /// </summary>
        /// <param name="charsToMask">number of chars to mask.</param>
        /// <param name="fromEnd">Should start masking from end.</param>
        /// <param name="maskingCharacter">the masking char.</param>
        public MaskValue(int? charsToMask = default(int?), bool? fromEnd = default(bool?), string maskingCharacter = default(string))
        {
            this.CharsToMask = charsToMask;
            this.FromEnd = fromEnd;
            this.MaskingCharacter = maskingCharacter;
        }
        
        /// <summary>
        /// number of chars to mask
        /// </summary>
        /// <value>number of chars to mask</value>
        [DataMember(Name="charsToMask", EmitDefaultValue=false)]
        public int? CharsToMask { get; set; }

        /// <summary>
        /// Should start masking from end
        /// </summary>
        /// <value>Should start masking from end</value>
        [DataMember(Name="fromEnd", EmitDefaultValue=false)]
        public bool? FromEnd { get; set; }

        /// <summary>
        /// the masking char
        /// </summary>
        /// <value>the masking char</value>
        [DataMember(Name="maskingCharacter", EmitDefaultValue=false)]
        public string MaskingCharacter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaskValue {\n");
            sb.Append("  CharsToMask: ").Append(CharsToMask).Append("\n");
            sb.Append("  FromEnd: ").Append(FromEnd).Append("\n");
            sb.Append("  MaskingCharacter: ").Append(MaskingCharacter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaskValue);
        }

        /// <summary>
        /// Returns true if MaskValue instances are equal
        /// </summary>
        /// <param name="input">Instance of MaskValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaskValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharsToMask == input.CharsToMask ||
                    (this.CharsToMask != null &&
                    this.CharsToMask.Equals(input.CharsToMask))
                ) && 
                (
                    this.FromEnd == input.FromEnd ||
                    (this.FromEnd != null &&
                    this.FromEnd.Equals(input.FromEnd))
                ) && 
                (
                    this.MaskingCharacter == input.MaskingCharacter ||
                    (this.MaskingCharacter != null &&
                    this.MaskingCharacter.Equals(input.MaskingCharacter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharsToMask != null)
                    hashCode = hashCode * 59 + this.CharsToMask.GetHashCode();
                if (this.FromEnd != null)
                    hashCode = hashCode * 59 + this.FromEnd.GetHashCode();
                if (this.MaskingCharacter != null)
                    hashCode = hashCode * 59 + this.MaskingCharacter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
