/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Azure EventHub configuration
    /// </summary>
    [DataContract]
    public partial class EHConfig :  IEquatable<EHConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EHConfig" /> class.
        /// </summary>
        /// <param name="containerValue">Storage container  value.</param>
        /// <param name="ehConnectionString">Eventhub connection string.</param>
        /// <param name="ehKeyName">Eventhub key name (a key name and a key value can provided instead of the full connection string).</param>
        /// <param name="ehKeyValue">Eventhub key value.</param>
        /// <param name="ehName">EventHub name.</param>
        /// <param name="ehNamespace">EventHub namespace.</param>
        /// <param name="storageAccountKeyValue">Storage account key value.</param>
        /// <param name="storageAccountNameValue">Storage account name value.</param>
        public EHConfig(string containerValue = default(string), string ehConnectionString = default(string), string ehKeyName = default(string), string ehKeyValue = default(string), string ehName = default(string), string ehNamespace = default(string), string storageAccountKeyValue = default(string), string storageAccountNameValue = default(string))
        {
            this.ContainerValue = containerValue;
            this.EhConnectionString = ehConnectionString;
            this.EhKeyName = ehKeyName;
            this.EhKeyValue = ehKeyValue;
            this.EhName = ehName;
            this.EhNamespace = ehNamespace;
            this.StorageAccountKeyValue = storageAccountKeyValue;
            this.StorageAccountNameValue = storageAccountNameValue;
        }
        
        /// <summary>
        /// Storage container  value
        /// </summary>
        /// <value>Storage container  value</value>
        [DataMember(Name="containerValue", EmitDefaultValue=false)]
        public string ContainerValue { get; set; }

        /// <summary>
        /// Eventhub connection string
        /// </summary>
        /// <value>Eventhub connection string</value>
        [DataMember(Name="ehConnectionString", EmitDefaultValue=false)]
        public string EhConnectionString { get; set; }

        /// <summary>
        /// Eventhub key name (a key name and a key value can provided instead of the full connection string)
        /// </summary>
        /// <value>Eventhub key name (a key name and a key value can provided instead of the full connection string)</value>
        [DataMember(Name="ehKeyName", EmitDefaultValue=false)]
        public string EhKeyName { get; set; }

        /// <summary>
        /// Eventhub key value
        /// </summary>
        /// <value>Eventhub key value</value>
        [DataMember(Name="ehKeyValue", EmitDefaultValue=false)]
        public string EhKeyValue { get; set; }

        /// <summary>
        /// EventHub name
        /// </summary>
        /// <value>EventHub name</value>
        [DataMember(Name="ehName", EmitDefaultValue=false)]
        public string EhName { get; set; }

        /// <summary>
        /// EventHub namespace
        /// </summary>
        /// <value>EventHub namespace</value>
        [DataMember(Name="ehNamespace", EmitDefaultValue=false)]
        public string EhNamespace { get; set; }

        /// <summary>
        /// Storage account key value
        /// </summary>
        /// <value>Storage account key value</value>
        [DataMember(Name="storageAccountKeyValue", EmitDefaultValue=false)]
        public string StorageAccountKeyValue { get; set; }

        /// <summary>
        /// Storage account name value
        /// </summary>
        /// <value>Storage account name value</value>
        [DataMember(Name="storageAccountNameValue", EmitDefaultValue=false)]
        public string StorageAccountNameValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EHConfig {\n");
            sb.Append("  ContainerValue: ").Append(ContainerValue).Append("\n");
            sb.Append("  EhConnectionString: ").Append(EhConnectionString).Append("\n");
            sb.Append("  EhKeyName: ").Append(EhKeyName).Append("\n");
            sb.Append("  EhKeyValue: ").Append(EhKeyValue).Append("\n");
            sb.Append("  EhName: ").Append(EhName).Append("\n");
            sb.Append("  EhNamespace: ").Append(EhNamespace).Append("\n");
            sb.Append("  StorageAccountKeyValue: ").Append(StorageAccountKeyValue).Append("\n");
            sb.Append("  StorageAccountNameValue: ").Append(StorageAccountNameValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EHConfig);
        }

        /// <summary>
        /// Returns true if EHConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of EHConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EHConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerValue == input.ContainerValue ||
                    (this.ContainerValue != null &&
                    this.ContainerValue.Equals(input.ContainerValue))
                ) && 
                (
                    this.EhConnectionString == input.EhConnectionString ||
                    (this.EhConnectionString != null &&
                    this.EhConnectionString.Equals(input.EhConnectionString))
                ) && 
                (
                    this.EhKeyName == input.EhKeyName ||
                    (this.EhKeyName != null &&
                    this.EhKeyName.Equals(input.EhKeyName))
                ) && 
                (
                    this.EhKeyValue == input.EhKeyValue ||
                    (this.EhKeyValue != null &&
                    this.EhKeyValue.Equals(input.EhKeyValue))
                ) && 
                (
                    this.EhName == input.EhName ||
                    (this.EhName != null &&
                    this.EhName.Equals(input.EhName))
                ) && 
                (
                    this.EhNamespace == input.EhNamespace ||
                    (this.EhNamespace != null &&
                    this.EhNamespace.Equals(input.EhNamespace))
                ) && 
                (
                    this.StorageAccountKeyValue == input.StorageAccountKeyValue ||
                    (this.StorageAccountKeyValue != null &&
                    this.StorageAccountKeyValue.Equals(input.StorageAccountKeyValue))
                ) && 
                (
                    this.StorageAccountNameValue == input.StorageAccountNameValue ||
                    (this.StorageAccountNameValue != null &&
                    this.StorageAccountNameValue.Equals(input.StorageAccountNameValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerValue != null)
                    hashCode = hashCode * 59 + this.ContainerValue.GetHashCode();
                if (this.EhConnectionString != null)
                    hashCode = hashCode * 59 + this.EhConnectionString.GetHashCode();
                if (this.EhKeyName != null)
                    hashCode = hashCode * 59 + this.EhKeyName.GetHashCode();
                if (this.EhKeyValue != null)
                    hashCode = hashCode * 59 + this.EhKeyValue.GetHashCode();
                if (this.EhName != null)
                    hashCode = hashCode * 59 + this.EhName.GetHashCode();
                if (this.EhNamespace != null)
                    hashCode = hashCode * 59 + this.EhNamespace.GetHashCode();
                if (this.StorageAccountKeyValue != null)
                    hashCode = hashCode * 59 + this.StorageAccountKeyValue.GetHashCode();
                if (this.StorageAccountNameValue != null)
                    hashCode = hashCode * 59 + this.StorageAccountNameValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
