/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnonymizeRequest represents the request to the anonymize service via GRPC
    /// </summary>
    [DataContract]
    public partial class AnonymizeRequest :  IEquatable<AnonymizeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizeRequest" /> class.
        /// </summary>
        /// <param name="analyzeResults">The analyze result containing the field type and location of the sensetive data to be anonymized..</param>
        /// <param name="template">template.</param>
        /// <param name="text">The text to anonymize.</param>
        public AnonymizeRequest(List<AnalyzeResult> analyzeResults = default(List<AnalyzeResult>), AnonymizeTemplate template = default(AnonymizeTemplate), string text = default(string))
        {
            this.AnalyzeResults = analyzeResults;
            this.Template = template;
            this.Text = text;
        }
        
        /// <summary>
        /// The analyze result containing the field type and location of the sensetive data to be anonymized.
        /// </summary>
        /// <value>The analyze result containing the field type and location of the sensetive data to be anonymized.</value>
        [DataMember(Name="analyzeResults", EmitDefaultValue=false)]
        public List<AnalyzeResult> AnalyzeResults { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public AnonymizeTemplate Template { get; set; }

        /// <summary>
        /// The text to anonymize
        /// </summary>
        /// <value>The text to anonymize</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnonymizeRequest {\n");
            sb.Append("  AnalyzeResults: ").Append(AnalyzeResults).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnonymizeRequest);
        }

        /// <summary>
        /// Returns true if AnonymizeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AnonymizeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnonymizeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalyzeResults == input.AnalyzeResults ||
                    this.AnalyzeResults != null &&
                    this.AnalyzeResults.SequenceEqual(input.AnalyzeResults)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalyzeResults != null)
                    hashCode = hashCode * 59 + this.AnalyzeResults.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
