/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// And sending the output to the selected destination
    /// </summary>
    [DataContract]
    public partial class StreamTemplate :  IEquatable<StreamTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamTemplate" /> class.
        /// </summary>
        /// <param name="analyzeTemplateId">The analyzer template id configures the fields to analyze.</param>
        /// <param name="anonymizeTemplateId">The anonymizer template id configures how to anonymize the sensitive data [optional].</param>
        /// <param name="datasinkTemplateId">The datasinkTemplateId configures the output destination of the analyzer/anonymizer results.</param>
        /// <param name="description">Template description.</param>
        /// <param name="name">The job name.</param>
        /// <param name="streamConfig">streamConfig.</param>
        public StreamTemplate(string analyzeTemplateId = default(string), string anonymizeTemplateId = default(string), string datasinkTemplateId = default(string), string description = default(string), string name = default(string), StreamConfig streamConfig = default(StreamConfig))
        {
            this.AnalyzeTemplateId = analyzeTemplateId;
            this.AnonymizeTemplateId = anonymizeTemplateId;
            this.DatasinkTemplateId = datasinkTemplateId;
            this.Description = description;
            this.Name = name;
            this.StreamConfig = streamConfig;
        }
        
        /// <summary>
        /// The analyzer template id configures the fields to analyze
        /// </summary>
        /// <value>The analyzer template id configures the fields to analyze</value>
        [DataMember(Name="analyzeTemplateId", EmitDefaultValue=false)]
        public string AnalyzeTemplateId { get; set; }

        /// <summary>
        /// The anonymizer template id configures how to anonymize the sensitive data [optional]
        /// </summary>
        /// <value>The anonymizer template id configures how to anonymize the sensitive data [optional]</value>
        [DataMember(Name="anonymizeTemplateId", EmitDefaultValue=false)]
        public string AnonymizeTemplateId { get; set; }

        /// <summary>
        /// The datasinkTemplateId configures the output destination of the analyzer/anonymizer results
        /// </summary>
        /// <value>The datasinkTemplateId configures the output destination of the analyzer/anonymizer results</value>
        [DataMember(Name="datasinkTemplateId", EmitDefaultValue=false)]
        public string DatasinkTemplateId { get; set; }

        /// <summary>
        /// Template description
        /// </summary>
        /// <value>Template description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The job name
        /// </summary>
        /// <value>The job name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StreamConfig
        /// </summary>
        [DataMember(Name="streamConfig", EmitDefaultValue=false)]
        public StreamConfig StreamConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamTemplate {\n");
            sb.Append("  AnalyzeTemplateId: ").Append(AnalyzeTemplateId).Append("\n");
            sb.Append("  AnonymizeTemplateId: ").Append(AnonymizeTemplateId).Append("\n");
            sb.Append("  DatasinkTemplateId: ").Append(DatasinkTemplateId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StreamConfig: ").Append(StreamConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamTemplate);
        }

        /// <summary>
        /// Returns true if StreamTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalyzeTemplateId == input.AnalyzeTemplateId ||
                    (this.AnalyzeTemplateId != null &&
                    this.AnalyzeTemplateId.Equals(input.AnalyzeTemplateId))
                ) && 
                (
                    this.AnonymizeTemplateId == input.AnonymizeTemplateId ||
                    (this.AnonymizeTemplateId != null &&
                    this.AnonymizeTemplateId.Equals(input.AnonymizeTemplateId))
                ) && 
                (
                    this.DatasinkTemplateId == input.DatasinkTemplateId ||
                    (this.DatasinkTemplateId != null &&
                    this.DatasinkTemplateId.Equals(input.DatasinkTemplateId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StreamConfig == input.StreamConfig ||
                    (this.StreamConfig != null &&
                    this.StreamConfig.Equals(input.StreamConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalyzeTemplateId != null)
                    hashCode = hashCode * 59 + this.AnalyzeTemplateId.GetHashCode();
                if (this.AnonymizeTemplateId != null)
                    hashCode = hashCode * 59 + this.AnonymizeTemplateId.GetHashCode();
                if (this.DatasinkTemplateId != null)
                    hashCode = hashCode * 59 + this.DatasinkTemplateId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StreamConfig != null)
                    hashCode = hashCode * 59 + this.StreamConfig.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
