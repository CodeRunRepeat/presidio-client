/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AWS S3 configuration
    /// </summary>
    [DataContract]
    public partial class S3Config :  IEquatable<S3Config>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="S3Config" /> class.
        /// </summary>
        /// <param name="accessId">The access id.</param>
        /// <param name="accessKey">The access key.</param>
        /// <param name="bucketName">The bucket name.</param>
        /// <param name="endpoint">The s3 endpoint.</param>
        /// <param name="region">The region.</param>
        public S3Config(string accessId = default(string), string accessKey = default(string), string bucketName = default(string), string endpoint = default(string), string region = default(string))
        {
            this.AccessId = accessId;
            this.AccessKey = accessKey;
            this.BucketName = bucketName;
            this.Endpoint = endpoint;
            this.Region = region;
        }
        
        /// <summary>
        /// The access id
        /// </summary>
        /// <value>The access id</value>
        [DataMember(Name="accessId", EmitDefaultValue=false)]
        public string AccessId { get; set; }

        /// <summary>
        /// The access key
        /// </summary>
        /// <value>The access key</value>
        [DataMember(Name="accessKey", EmitDefaultValue=false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// The bucket name
        /// </summary>
        /// <value>The bucket name</value>
        [DataMember(Name="bucketName", EmitDefaultValue=false)]
        public string BucketName { get; set; }

        /// <summary>
        /// The s3 endpoint
        /// </summary>
        /// <value>The s3 endpoint</value>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The region
        /// </summary>
        /// <value>The region</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class S3Config {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  BucketName: ").Append(BucketName).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as S3Config);
        }

        /// <summary>
        /// Returns true if S3Config instances are equal
        /// </summary>
        /// <param name="input">Instance of S3Config to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(S3Config input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.BucketName == input.BucketName ||
                    (this.BucketName != null &&
                    this.BucketName.Equals(input.BucketName))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                    hashCode = hashCode * 59 + this.AccessId.GetHashCode();
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.BucketName != null)
                    hashCode = hashCode * 59 + this.BucketName.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
