/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PatternRecognizer represents a recognizer which has the ability to detect entities using one or more Patterns
    /// </summary>
    [DataContract]
    public partial class PatternRecognizer :  IEquatable<PatternRecognizer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatternRecognizer" /> class.
        /// </summary>
        /// <param name="blacklist">A list of words that are considered PII and should always be detected e.g. [\&quot;Mr\&quot;, \&quot;Mrs\&quot;, \&quot;account\&quot;].</param>
        /// <param name="contextPhrases">A list of strings that if found in the surroundings of the entity, increase the score of the result e.g. [\&quot;name\&quot;, \&quot;address\&quot;, ].</param>
        /// <param name="entity">The entity name which this recognizer can detect.</param>
        /// <param name="language">The supported language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1.</param>
        /// <param name="name">The name of the recognizer, unique.</param>
        /// <param name="patterns">List of supported patterns by this recognizer.</param>
        public PatternRecognizer(List<string> blacklist = default(List<string>), List<string> contextPhrases = default(List<string>), string entity = default(string), string language = default(string), string name = default(string), List<Pattern> patterns = default(List<Pattern>))
        {
            this.Blacklist = blacklist;
            this.ContextPhrases = contextPhrases;
            this.Entity = entity;
            this.Language = language;
            this.Name = name;
            this.Patterns = patterns;
        }
        
        /// <summary>
        /// A list of words that are considered PII and should always be detected e.g. [\&quot;Mr\&quot;, \&quot;Mrs\&quot;, \&quot;account\&quot;]
        /// </summary>
        /// <value>A list of words that are considered PII and should always be detected e.g. [\&quot;Mr\&quot;, \&quot;Mrs\&quot;, \&quot;account\&quot;]</value>
        [DataMember(Name="blacklist", EmitDefaultValue=false)]
        public List<string> Blacklist { get; set; }

        /// <summary>
        /// A list of strings that if found in the surroundings of the entity, increase the score of the result e.g. [\&quot;name\&quot;, \&quot;address\&quot;, ]
        /// </summary>
        /// <value>A list of strings that if found in the surroundings of the entity, increase the score of the result e.g. [\&quot;name\&quot;, \&quot;address\&quot;, ]</value>
        [DataMember(Name="contextPhrases", EmitDefaultValue=false)]
        public List<string> ContextPhrases { get; set; }

        /// <summary>
        /// The entity name which this recognizer can detect
        /// </summary>
        /// <value>The entity name which this recognizer can detect</value>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public string Entity { get; set; }

        /// <summary>
        /// The supported language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1
        /// </summary>
        /// <value>The supported language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The name of the recognizer, unique
        /// </summary>
        /// <value>The name of the recognizer, unique</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of supported patterns by this recognizer
        /// </summary>
        /// <value>List of supported patterns by this recognizer</value>
        [DataMember(Name="patterns", EmitDefaultValue=false)]
        public List<Pattern> Patterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatternRecognizer {\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  ContextPhrases: ").Append(ContextPhrases).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatternRecognizer);
        }

        /// <summary>
        /// Returns true if PatternRecognizer instances are equal
        /// </summary>
        /// <param name="input">Instance of PatternRecognizer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatternRecognizer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Blacklist == input.Blacklist ||
                    this.Blacklist != null &&
                    this.Blacklist.SequenceEqual(input.Blacklist)
                ) && 
                (
                    this.ContextPhrases == input.ContextPhrases ||
                    this.ContextPhrases != null &&
                    this.ContextPhrases.SequenceEqual(input.ContextPhrases)
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    this.Patterns != null &&
                    this.Patterns.SequenceEqual(input.Patterns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blacklist != null)
                    hashCode = hashCode * 59 + this.Blacklist.GetHashCode();
                if (this.ContextPhrases != null)
                    hashCode = hashCode * 59 + this.ContextPhrases.GetHashCode();
                if (this.Entity != null)
                    hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
