/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnonymizeImageTemplate represents the template definition of the Anonymize image service
    /// </summary>
    [DataContract]
    public partial class AnonymizeImageTemplate :  IEquatable<AnonymizeImageTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizeImageTemplate" /> class.
        /// </summary>
        /// <param name="createTime">Template Creation date.</param>
        /// <param name="description">Template description.</param>
        /// <param name="fieldTypeGraphics">FieldTypeGraphic represents the graphics for an array of fields types.</param>
        /// <param name="modifiedTime">Template modification date.</param>
        public AnonymizeImageTemplate(string createTime = default(string), string description = default(string), List<FieldTypeGraphic> fieldTypeGraphics = default(List<FieldTypeGraphic>), string modifiedTime = default(string))
        {
            this.CreateTime = createTime;
            this.Description = description;
            this.FieldTypeGraphics = fieldTypeGraphics;
            this.ModifiedTime = modifiedTime;
        }
        
        /// <summary>
        /// Template Creation date
        /// </summary>
        /// <value>Template Creation date</value>
        [DataMember(Name="createTime", EmitDefaultValue=false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// Template description
        /// </summary>
        /// <value>Template description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// FieldTypeGraphic represents the graphics for an array of fields types
        /// </summary>
        /// <value>FieldTypeGraphic represents the graphics for an array of fields types</value>
        [DataMember(Name="fieldTypeGraphics", EmitDefaultValue=false)]
        public List<FieldTypeGraphic> FieldTypeGraphics { get; set; }

        /// <summary>
        /// Template modification date
        /// </summary>
        /// <value>Template modification date</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnonymizeImageTemplate {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FieldTypeGraphics: ").Append(FieldTypeGraphics).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnonymizeImageTemplate);
        }

        /// <summary>
        /// Returns true if AnonymizeImageTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of AnonymizeImageTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnonymizeImageTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FieldTypeGraphics == input.FieldTypeGraphics ||
                    this.FieldTypeGraphics != null &&
                    this.FieldTypeGraphics.SequenceEqual(input.FieldTypeGraphics)
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FieldTypeGraphics != null)
                    hashCode = hashCode * 59 + this.FieldTypeGraphics.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
