/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnonymizeRequest represents the request to the anonymize service via GRPC
    /// </summary>
    [DataContract]
    public partial class AnonymizeImageRequest :  IEquatable<AnonymizeImageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizeImageRequest" /> class.
        /// </summary>
        /// <param name="analyzeResults">The analyze result containing the field type and location of the sensetive data to be anonymized..</param>
        /// <param name="detectionType">detectionType.</param>
        /// <param name="image">image.</param>
        /// <param name="template">template.</param>
        public AnonymizeImageRequest(List<AnalyzeResult> analyzeResults = default(List<AnalyzeResult>), DetectionTypeEnum detectionType = default(DetectionTypeEnum), Image image = default(Image), AnonymizeImageTemplate template = default(AnonymizeImageTemplate))
        {
            this.AnalyzeResults = analyzeResults;
            this.DetectionType = detectionType;
            this.Image = image;
            this.Template = template;
        }
        
        /// <summary>
        /// The analyze result containing the field type and location of the sensetive data to be anonymized.
        /// </summary>
        /// <value>The analyze result containing the field type and location of the sensetive data to be anonymized.</value>
        [DataMember(Name="analyzeResults", EmitDefaultValue=false)]
        public List<AnalyzeResult> AnalyzeResults { get; set; }

        /// <summary>
        /// Gets or Sets DetectionType
        /// </summary>
        [DataMember(Name="detectionType", EmitDefaultValue=false)]
        public DetectionTypeEnum DetectionType { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public Image Image { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public AnonymizeImageTemplate Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnonymizeImageRequest {\n");
            sb.Append("  AnalyzeResults: ").Append(AnalyzeResults).Append("\n");
            sb.Append("  DetectionType: ").Append(DetectionType).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnonymizeImageRequest);
        }

        /// <summary>
        /// Returns true if AnonymizeImageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AnonymizeImageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnonymizeImageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalyzeResults == input.AnalyzeResults ||
                    this.AnalyzeResults != null &&
                    this.AnalyzeResults.SequenceEqual(input.AnalyzeResults)
                ) && 
                (
                    this.DetectionType == input.DetectionType ||
                    (this.DetectionType != null &&
                    this.DetectionType.Equals(input.DetectionType))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalyzeResults != null)
                    hashCode = hashCode * 59 + this.AnalyzeResults.GetHashCode();
                if (this.DetectionType != null)
                    hashCode = hashCode * 59 + this.DetectionType.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
