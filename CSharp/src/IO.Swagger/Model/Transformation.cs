/* 
 * Presidio.
 *
 * Documentation for Presidio API Swagger.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Transformation represents the transformation types - how the sensitive text will change
    /// </summary>
    [DataContract]
    public partial class Transformation :  IEquatable<Transformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transformation" /> class.
        /// </summary>
        /// <param name="fPEValue">fPEValue.</param>
        /// <param name="hashValue">hashValue.</param>
        /// <param name="maskValue">maskValue.</param>
        /// <param name="redactValue">redactValue.</param>
        /// <param name="replaceValue">replaceValue.</param>
        public Transformation(FPEValue fPEValue = default(FPEValue), HashValue hashValue = default(HashValue), MaskValue maskValue = default(MaskValue), RedactValue redactValue = default(RedactValue), ReplaceValue replaceValue = default(ReplaceValue))
        {
            this.FPEValue = fPEValue;
            this.HashValue = hashValue;
            this.MaskValue = maskValue;
            this.RedactValue = redactValue;
            this.ReplaceValue = replaceValue;
        }
        
        /// <summary>
        /// Gets or Sets FPEValue
        /// </summary>
        [DataMember(Name="fPEValue", EmitDefaultValue=false)]
        public FPEValue FPEValue { get; set; }

        /// <summary>
        /// Gets or Sets HashValue
        /// </summary>
        [DataMember(Name="hashValue", EmitDefaultValue=false)]
        public HashValue HashValue { get; set; }

        /// <summary>
        /// Gets or Sets MaskValue
        /// </summary>
        [DataMember(Name="maskValue", EmitDefaultValue=false)]
        public MaskValue MaskValue { get; set; }

        /// <summary>
        /// Gets or Sets RedactValue
        /// </summary>
        [DataMember(Name="redactValue", EmitDefaultValue=false)]
        public RedactValue RedactValue { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceValue
        /// </summary>
        [DataMember(Name="replaceValue", EmitDefaultValue=false)]
        public ReplaceValue ReplaceValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transformation {\n");
            sb.Append("  FPEValue: ").Append(FPEValue).Append("\n");
            sb.Append("  HashValue: ").Append(HashValue).Append("\n");
            sb.Append("  MaskValue: ").Append(MaskValue).Append("\n");
            sb.Append("  RedactValue: ").Append(RedactValue).Append("\n");
            sb.Append("  ReplaceValue: ").Append(ReplaceValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transformation);
        }

        /// <summary>
        /// Returns true if Transformation instances are equal
        /// </summary>
        /// <param name="input">Instance of Transformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FPEValue == input.FPEValue ||
                    (this.FPEValue != null &&
                    this.FPEValue.Equals(input.FPEValue))
                ) && 
                (
                    this.HashValue == input.HashValue ||
                    (this.HashValue != null &&
                    this.HashValue.Equals(input.HashValue))
                ) && 
                (
                    this.MaskValue == input.MaskValue ||
                    (this.MaskValue != null &&
                    this.MaskValue.Equals(input.MaskValue))
                ) && 
                (
                    this.RedactValue == input.RedactValue ||
                    (this.RedactValue != null &&
                    this.RedactValue.Equals(input.RedactValue))
                ) && 
                (
                    this.ReplaceValue == input.ReplaceValue ||
                    (this.ReplaceValue != null &&
                    this.ReplaceValue.Equals(input.ReplaceValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FPEValue != null)
                    hashCode = hashCode * 59 + this.FPEValue.GetHashCode();
                if (this.HashValue != null)
                    hashCode = hashCode * 59 + this.HashValue.GetHashCode();
                if (this.MaskValue != null)
                    hashCode = hashCode * 59 + this.MaskValue.GetHashCode();
                if (this.RedactValue != null)
                    hashCode = hashCode * 59 + this.RedactValue.GetHashCode();
                if (this.ReplaceValue != null)
                    hashCode = hashCode * 59 + this.ReplaceValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
